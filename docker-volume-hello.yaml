
socket: /run/docker/plugins/docker-volume-rbd.sock

defaults:
    poolname: PoolNamehello
    namespace: Namespacehi
    image: VolumeName
    size: 1G

 # Template data is a map[string]string 
 #   - "name" map entry is always given except to list
 #   - ONLY create gets the full options which also contain the UNION{config.defaults, docker.opts}
 #     - config.defaults is defaults entry above
 #     - docker.opts is from docker volume opts (i.e. compose file or cli)
 # All other commands must store/restore full options if they need them
templates:
    create: |
        DOCKERVOLUME={{index . "name"}}
        CEPH_USER={{index . "image"}}
        POOL_NAME={{index . "poolname"}}
        RBDIMAGE={{ index . "image"}}
        NAMESPACE={{index . "namespace"}}
        SIZE={{index . "size"}}

        # Create pool, namespace and cephx user if don't already exist (TODO: cephx has little effect here, client.admin always present)
        ceph osd pool create $POOL_NAME
        rbd pool init $POOL_NAME
        if ! rbd namespace ls $POOL_NAME | grep $NAMESPACE; then
            rbd namespace create $POOL_NAME/$NAMESPACE
        fi
        ceph auth get-or-create client.$CEPH_USER -o /etc/ceph/ceph.client.$CEPH_USER.keyring \
            mon 'profile rbd' osd "profile rbd pool=$POOL_NAME namespace=$NAMESPACE"

        # Create actual image
        rbd create $POOL_NAME/$NAMESPACE/$RBDIMAGE --size $SIZE -n client.$CEPH_USER \
            --image-feature layering --image-feature exclusive-lock --image-feature object-map \
            --image-feature fast-diff

        # Store out image options
        ceph config-key put docker-rbd/$DOCKERVOLUME/user $CEPH_USER
        ceph config-key put docker-rbd/$DOCKERVOLUME/pool $POOL_NAME
        ceph config-key put docker-rbd/$DOCKERVOLUME/image $RBDIMAGE
        ceph config-key put docker-rbd/$DOCKERVOLUME/namespace $NAMESPACE

    mount: |
        DOCKERVOLUME={{index . "name"}}
        CEPH_USER=$(ceph config-key get docker-rbd/$DOCKERVOLUME/user)
        POOL_NAME=$(ceph config-key get docker-rbd/$DOCKERVOLUME/pool)
        RBDIMAGE=$( ceph config-key get docker-rbd/$DOCKERVOLUME/image)
        NAMESPACE=$(ceph config-key get docker-rbd/$DOCKERVOLUME/namespace)

        if ! rbd lock add $POOL_NAME/$NAMESPACE/$RBDIMAGE docker-volume-rbd; then
            if [ $(hostname) != $(ceph config-key get docker-rbd/$DOCKERVOLUME/host) ]; then
                echo "RBD image $POOL_NAME/$NAMESPACE/$RBDIMAGE is already mounted on $(ceph config-key get docker-rbd/$DOCKERVOLUME/host)"
                exit 1
            fi
        fi
        ceph config-key put docker-rbd/$DOCKERVOLUME/host $(hostname)
        if [ ! -e /dev/rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE ]; then
            rbd map $POOL_NAME/$NAMESPACE/$RBDIMAGE -n client.$CEPH_USER -o ms_mode=crc
        fi
        if [ "ext4" != $(blkid -o value -s TYPE /dev/rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE) ]; then
            mkfs.ext4 -m0 /dev/rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE
        fi
        mkdir -p /mnt/docker-volume-rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE
        if ! mountpoint -q /mnt/docker-volume-rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE; then
            mount /dev/rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE /mnt/docker-volume-rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE
        fi

    unmount: |
        DOCKERVOLUME={{index . "name"}}
        POOL_NAME=$(ceph config-key get docker-rbd/$DOCKERVOLUME/pool)
        RBDIMAGE=$( ceph config-key get docker-rbd/$DOCKERVOLUME/image)
        NAMESPACE=$(ceph config-key get docker-rbd/$DOCKERVOLUME/namespace)

        umount /dev/rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE
        rbd device unmap /dev/rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE
        ceph config-key rm docker-rbd/$DOCKERVOLUME/host
        rbd lock rm $POOL_NAME/$NAMESPACE/$RBDIMAGE docker-volume-rbd

    remove: |
        DOCKERVOLUME={{index . "name"}}
        CEPH_USER=$(ceph config-key get docker-rbd/$DOCKERVOLUME/user)
        POOL_NAME=$(ceph config-key get docker-rbd/$DOCKERVOLUME/pool)
        RBDIMAGE=$( ceph config-key get docker-rbd/$DOCKERVOLUME/image)
        NAMESPACE=$(ceph config-key get docker-rbd/$DOCKERVOLUME/namespace)

        ceph auth del client.$CEPH_USER
        rbd rm $POOL_NAME/$NAMESPACE/$RBDIMAGE || true
        ceph config-key get docker-rbd/$DOCKERVOLUME/user
        ceph config-key get docker-rbd/$DOCKERVOLUME/pool
        ceph config-key get docker-rbd/$DOCKERVOLUME/image
        ceph config-key get docker-rbd/$DOCKERVOLUME/namespace

        if [ 0 -eq $(rbd ls $POOL_NAME/$NAMESPACE | wc -l) ]; then
            #if no images in namespace, delete namespace
            rbd namespace rm $POOL_NAME/$NAMESPACE
        fi
        if [ 0 -eq $(rbd namespace ls $POOL_NAME | wc -l) ] ; then
            # 
            ceph osd pool delete $POOL_NAME $POOL_NAME --yes-i-really-really-mean-it
        fi

    get: |
        ceph config-key exists docker-rbd/{{index . "name"}}/image

    path: |
        DOCKERVOLUME={{index . "name"}}
        POOL_NAME=$(ceph config-key get docker-rbd/$DOCKERVOLUME/pool)
        RBDIMAGE=$( ceph config-key get docker-rbd/$DOCKERVOLUME/image)
        NAMESPACE=$(ceph config-key get docker-rbd/$DOCKERVOLUME/namespace)
        if ! mountpoint -q /mnt/docker-volume-rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE; then
            exit 1
        fi
        echo /mnt/docker-volume-rbd/$POOL_NAME/$NAMESPACE/$RBDIMAGE

    list: |
        ceph config-key dump  docker-rbd/ | sed -n -e 's/^.*docker-rbd\///' -e "s/\(.*\)\/host.*$(hostname).*$/\1/p"